Servlet(서블릿)
==> HttpJspBase 클래스를 상속 받은 클래스
	
	만약 우리가 서블릿 클래스를 직접 만들 수 있다면
	서버 입장에서는 JSP 파일을 서블릿 클래스로 변환하는 작업을 
	생략할 수 있게 될 것이다.
	
	참고 ]
		웹 프로그램 제작 방식
			1. Model 1
			==> JSP 문서를 만들어서 처리하는 방식
			
			2. Model 2
			==> MVC 패턴을 이용해서 제작하는 방식
				
				M	: Model 		- 데이터, 데이터를 가공하는 클래스
				V	: View  		- JSP 문서, HTML 문서
				C	: Controller 	- 요청을 분석하고 요청맞는 처리를 하고 응답문서를 제작하는 클래스
				
				
	서블릿 클래스를 제작하는 방법
		
		1. HttpServlet 클래스를 상속 받은 클래스를 제작
		2. 내부에 4 개의 함수를 오버라이드
			***
			1) public void init() throws ServletException {}
				==> init(초기화) 시점에서 실행되는 함수
					따라서 이 함수는 우리가 사용했던 자바 클래스의 생성자와 비슷한 기능
					
			2) protected void doPost(HttpServletRequest req, HttpServletResponse resp) 
													throws ServletException, IOException {}
			3) protected void doGet(HttpServletRequest req, HttpServletResponse resp) 
													throws ServletException, IOException {}
				==> doPost 	: Post 방식으로 요청하는 경우 처리하는 함수
					doGet	: Get 방식으로 요청하는 경우 처리하는 함수
					두 함수 모두 service 시점에서 실행되는 함수
							*****
					따라서 service() 가 기술이되면 실행되지 않는다.
					
			4) public void destory(){}
				==> destroy 시점에서 실행되는 함수
					해당 클래스가 주로 사용하던 자원을 제거하거나 반환해주는 목적으로 사용된다.
					
	참고 ]
		서블릿의 생존주기
			
			init		: 서블릿 클래스가 가장 처음 호출 되어지는 시점
			  |				( 누군가 처음으로 서블릿클래스를 요청한 경우 실행 )
			service		: 서블릿 매핑으로 매번 요청하는 경우 실행
			  |				( 요청 할 때마다 계속해서 실행 )
			destroy		: 적당한 시간(서버가 지정한 시간) 동안
							요청이 전혀 없는 경우의 시점
							따라서 주로 사용하던 자원을 반환해주는 목적으로 사용
