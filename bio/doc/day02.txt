# day02

JSP
==>
	웹 서버가 클라이언트에게 응답하기 위한 문서(주로 HTML문서)를 만들어주는 언어의 일종
	
	웹서버가 가진 엔진이 실행할 수 있는 언어가 존재하는데
	이것을 Server Side Page(SSP)라고 부른다.
	
	예 ]
		ASP
		==> Visual Basic 을 기본으로 해서 만든 SSP
		
		ASP.NET
		==>	C#
		
		PHP
		==> CGI
		
		JSP
		==> Java
		
	결론적으로 앞으로 학습할 내용은
	서버가 실행해서 클라이언트에게 응답하는 응답문서를 만들어주는
	언어를 공부하는 것이된다.
	
	다시 말해서
	서버가 실행하는 프로그램을 제작하는 것이고
	그 프로그램의 실행결과는 웹문서가 되는것이다.
	결과 문서를 클라이언트는 전송받아서 웹브라우저에서 해석해서 실행하게 된다.
	
---------------------------------------------------------------------------------------------

	프로젝트 생성방법
		
		Dynamic Web Project 를 만들어야 한다.
		
		필요한 라이브러리는
			프로젝트/WebContent/WEB-INF/lib
		폴더에 붙여넣기 한다.
		
		필요한 라이브러리 
			tomcat설치폴더/lib/jsp-api.jar
			tomcat설치폴더/lib/servlet-api.jar
			ojdbc6.jar - 오라클 사용할 경우
			
----------------------------------------------------------------------------------------------

프로젝트 구조
	
	Java Resources
	==> 자바 소스코드를 작성하는 위치
	
	WebContent
	==> Servlet 프로그램에 의해서 요청하는 문서를 저장할 폴더
		View 에 사용할 문서들(HTML, CSS, JS, JSP,...)이 저장되는 위치
		
		참고 ]
			WebContent(요청시 루트폴더( / )) 하위의 
				META-INF
				WEB-INF
			두 폴더는 시스템이 사용하는 폴더로
			일반 사용자는 접근할 수 없는 폴더이다.
			따라서 이 두 폴더 하위에 응답문서를 제작하면 응답할 수 없게된다.

---------------------------------------------------------------------------------------------------

서버 환경 구축
	
	서버의 환경 설정은 xml 파일에서 정의 하게 된다.
	
	참고 ]
		xml 파일
		==> eXtensional Markup Language 의 약자
			(확장성이 있는 마크업 언어)
			
			태그를 이용해서 파일의 내용을 구분하도록 만들어지는 문서
			그 중에 HTML 문서가 포함된다.
			
			그런데 HTML 의 경우 사용하는 태그가 이미 정의 되어있고(W3c)
			xml의 경우는 사용자가 태그를 정의하고
			그 태그를 이용해서 문서를 만든다.
			
		xml 파일은 주로 프로그램 환경설정을 위한 목적으로 많이 사용되는 문서.
		
		실행순서
			먼저 xml파일을 읽은 후
			그 파일의 내용을 분석 ==> 내용 분석 : "파싱한다." 라고 표현한다.
			
			==> 파싱된 결과를 프로그램에서 이용
			
		참고 ]
			xml 문서를 파싱하기 위해서는 그 xml 문서의 태그의 의미를 알아야 한다.
			해당 태그들은 xml 문서를 만드는 사람이  태그의 순서, 의미, 구조,... 등을
			정의해 놓은 문서가 별도로 존재한다.
			이 문서를 "DTD" 또는 "스키마문서" 라고 부른다.
	
	*****
	당부 ]
		서버 설정 내용이 이해가 안가더라도 절대로
			XML 언어에 대한 공부는 삼가하세요.
			
		XML 언어에 여려분이 궁금해하는 그 태그들의 내용은 없습니다.
		
-----------------------------------------------------------------------------------------
		

# server.xml 수정내용 : 서버에 대한 전반적인 설정

<Connector connectionTimeout="20000" 
    			maxParameterCount="1000" 
    			port="8080" 
    			protocol="HTTP/1.1" 
    			redirectPort="8443"/>
    			
==> 수정

<Connector connectionTimeout="20000" 
    			maxParameterCount="1000" 
    			port="80" 
    			protocol="HTTP/1.1" 
    			redirectPort="8443"
    			URIEncoding="UTF-8" />
    			
    			
			
<Context docBase="bio" path="/bio" reloadable="true" source="org.eclipse.jst.jee.server:bio"/></Host>
==> 클라이언트가 요청할 때 기본 경로를 정의하는 부분
	이렇게 정의해놓으면 
		index.html 파일을 요청할 경우
		==> http://localhost:8080/bio/index.html 로 요청해야 한다.
		
	path="/"
		==> http://localhost:8080/index.html
			
			
	docBase="bio"
	==> 프로젝트 이름

*****
참고 ]
	서버프로그램이 변경되거나 (클래스가 추가되거나 하는 작업..)
	서버의 설정이 변경되면
	반드시 서버를 다시 시작해야 한다.


# web.xml
	
	<welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    
    ==> 경로로 요청하는 경우 응답해줄 문서를 정의하는 부분....
    	
    	localhost/
    	로 요청하면 <welcome-file> 로 정의되어있는 문서로 응답해준다.


# Post 방식 인코딩

  <!-- A filter that sets character encoding that is used to decode -->
  <!-- parameters in a POST request -->

    <filter>
        <filter-name>setCharacterEncodingFilter</filter-name>
        <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- <async-supported>true</async-supported> -->
    </filter>

  <!-- The mapping for the Set Character Encoding Filter -->

    <filter-mapping>
        <filter-name>setCharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


------------------------------------------------------------------------------------------

JSP 구조
	
	JSP는 응답 문서를 만들기 위한 언어의 일종
	
	엄밀히 말해서 
	웹에서 응답 문서는 HTML 문서이기 때문에
	HTML 이 중심이 된다. ==> 전체적인 구조가 HTML 형식이 되어야 한다.
	그리고 추가적으로 Java 적인 요소가 포함 될 수 있다.
	
	따라서 결론적으로 JSP 문서는 자바적인 요소를 포함 할 수 있는 스크립트 언어이다.
	
	HTML 문서와의 차이점
		HTML은 서버에서 실행이 불가능하고
		오직 클라이언트의 웹브라우저에서만 실행이 가능한 언어이다.
		==> 서버에서는 오직 미리 준비된 문서를 단순히 응답하는 것일 뿐
			내용 변화를 시킬 수 없다.
			
		JSP 는 서버에서 실행되는 언어이다.
		다시 말해서 클라이언트의 웹브라우저에서 실행되는 문서가 아니다.
		==> 요청이 올때마다 서버측에서 실행을 해서
			새로운 HTML 문서를 제작하는 용도로 사용된다.
			따라서 실행할때마다 내용을 바꿀 수 있기 때문에
			응답 문서의  내용 변화를 시킬 수 있다.
			
			
따라서 JSP  구조에서 공부해야할 내용은
	"자바적인 요소를 어떤 방식으로 HTML 문서내부에 추가하는지 "
를 공부하게 된다.

-----------------------------------------------------------------------------------------

지시자
==> JSP  문서의 특성이나 처리 방식을 지시하는 명령

	형식 ]
		
		<%@ 명령어 속성="값" 속성="값"  %>
		
	명령어의 종류
		page		: 문서 자체의 특성이나 처리방식을 지시하는 명령
		include		: 문서 안에 다른 문서를 포함하도록 지시하는 명령
		taglib		: 사용자가 제작한 태그를 사용할 수 있도록 선언하는 명령
		
		
		1. page 명령
			==> 현재 제작하는 문서 자체에 특성이나 처리 방식을 지시하는 명령
			
			형식 ]
				
				<%@ page 속성="값" 속성="값" ... %>
				
			참고 ]
				속성 : 지정하고 싶은 특성이나 처리방식에 대한 예약된 단어
				값	 : 해당 특성이나 처리방식에 대한 내용
				
			1) language
				==> 스크립트할 언어의 종류를 지정하는 속성
					생략하면 자동으로 자바언어를 사용하게 된다.
					
					형식 ]
						
						<%@ page language="java" %>
						
			2) extends
				==> JSP는 실행을 하면 내부적으로 자바클래스로 변환되어서 실행되도록 되어있다.
					(즉, 중간단계의 언어로 바뀐 상태에서 실행을 하므로
						ASP, PHP 보다 실행속도가 빠른 장점을 가지고 있다.)
						
					이때 중간에서 만들어지는 클래스가 어떤 클래스를 상속 받아서 만들어지는지를 지정하는 속성이다.
					
					그런데
					JSP는 클래스로 변환될 때 HttpJspBase 클래스를 상속 받도록 되어있다.
					그런데 자바에서 클래스의 상속은 단일 상속만 가능하므로
					다른 클래스를 상속 받을 수 없는 상태가 된다.
					따라서 생략해도 무방하고
					생략하면 자동적으로 HttpJspBase를 상속받게된다.
					
					형식 ]
						
						<%@ page extends="javax.servlet.jsp.HttpJspBase" %>
			
			*
			3) import
				==> 문서내에서 자바적인 요소를 추가할 수 있는데
			
			4) session
			
			5) buffer
			
			6) autoFlush
			
			7) isThreadSafe
			
			8) info
			
			9) errorPage
			
			10) isErrorPage
			
			11) contentType
			
			12) pageEncoding
			
			
			
			














































		
		