# day06

액션태그

==> JSP는 HTML언어를 기반으로
	필요한 위치에 자바 코드를 추가하는 스크립트 방식으로 만들어진 언어다.
	
	그래서 HTML은 태그를 중심으로 제작되고
	자바코드는 <% %> 를 이용해서 작성을 하므로
	조금 불편하다.
	
	그래서 자주사용하는 자바적인 기능을 HTML처럼(태그방식) 사용할 수 있도록
	만들어 놓은 보조적인 명령을 말한다.
	
	1. forward를 대신하는 액션태그
		
		형식 1 ]
			<jsp:forward page="대신응답할문서" />
			==> 보여질 문서만 변경하는 기능
			
		형식 2 ]
			<jsp:forward page="대신응답할문서">
				<jsp:param name="키값" value="데이터" scope="????" />
				.....
			</jsp:forward>
			==> 보여질 문서도 변경하고
				+ 데이터도 새롭게 추가하는 기능
				
	참고 ]
		액션태그는 xhtml을 기반으로 제작된 태그이다.
		따라서 몸체가 있는 태그는
			<태그이름>
				다른내용
			</태그이름>
			
		몸체가 없는 택그는
			<태그이름 .... />
	
	*****
	2. 다른 문서를 포함시키는 기능을 가진 액션 태그
	==> 
		<%@ include file="" %> 과 비슷한 기능을 가진 액션태그
		
		
		형식 ]
			<jsp:include page="합칠 문서" />
			
			
		주의 ]
			<%@ include file="합칠문서" %>
				먼저 코드를 합치고 클래스로 만든다.
				따라서 변수가 충돌이 생길 수 있다.
			
			<jsp:include page="합칠문서" />
				각각 클래스를 만들어서 실행한 후
				실행 결과만 합치게 된다.
				따라서 충돌의 염려가 없다.
	
----------------------------------------------------------------------------------------------
참고 ]
	jar, war 파일은 자바의 압축파일로
	프로젝트나 라이브러리를 패키지째로 압축해놓은 파일이다.
	이것을 사용할 때는 그대로 필요한 위치에 넣거나 
	선택해주면 된다.
----------------------------------------------------------------------------------------------

JSTL(Java Standard Tag Library)
==> JSP를 제작하다보면 HTML과 자바가 혼용 되어서 만들어진다.
	그래서 자바코드를 입력하는 경우
	스크립트 릿을 사용해서 입력하게 된다.
	==> 이것은 개발자가 뷰 문서(HTML)를 제작할 때 항상 고민되는 부분이다.
	
	JSTL 이란?
		JSP는 HTML(태그를 이용한 문서)이 우선이 되고
		자바 코드 역시 태그 형식으로 사용할 수 있도록 만들어서
		( ==> 문서를 작성하는 형식이 통일이 된다. )
		통일된 방식으로 문서를 만들 수 있도록 만들어 놓은 라이브러리이다.
		
	예 ]
		
		이제까지는
			<%
				for(int i = 0 ; i < 10 ; i++ ){
			%>
					<div class="w3-button">div + <%= i %></div>
			<%
				}
			%>
		
		이제부터는 JSTL로
			
			<c:forEach begin="0" end="10" step="1">
				<div class="w3-button">div + <%= i %></div>
			</c:forEach>
			
	JSTL 사용방법 ]
		
		1. JSTL 라이브러리를 다운받아서
			프로젝트의 
				WebContent/WEB-INF/lib
			폴더에 붙여넣어준다.
			
			==> 결과적으로 프로젝트에 사용할 라이브러리 등록이 된 상태가 된다.
			
		2. JSTL이 필요한 문서의 상단에
			
			<%@ taglib prefix="[1]" uri="[2]" %>
				[1] : 접두어 선언
						접두어로 아무것이나 구분되도록 입력해주면 되지만
						암묵적으로
							c		:  Core Tag 접두어
								<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
							
							fn		: Function
								<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/function" %>
							
							fmt		: Formatting
								<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
							
							sql		: SQL
								<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
							
							x		: XML
								<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>
							
						사용하는 것이 관례이다.
						
				[2] : 태그라이브러리를 제공하는 CDN 네트워크 경로
				
				
	참고 ]
		
		JSTL 종류
			*****
			1. Core Tag
			==> 일반적인 자바 명령을 태그로 만들어 놓은 라이브러리
			
			2. Formatting Tag
			==> 출력할 때 모양을 지정하기 위한 기능을 태그로 많들어 놓은 라이브러리
			
			**
			3. Function Tag
			==> 자바에서 자주 사용하는 함수를 사용할 수 있도록 만들어놓은 라이브러리
			
			4. SQL Tag
			==> 데이터베이스를 사용할 때 필요한 기능을 태그로 만들어 놓은 라이브러리
			
			5. XML Tag
			==> xml 문서 처리를 위한 기능을 태그로 만들어 놓은 라이브러리

----------------------------------------------------------------------------------------------------
표현언어(EL, Expression Language)
	
	형식 ]
		${출력할 내용}
		
	의미 ]
		"출력할 내용"을 이구분이 작성된 부분에 기술한다.
		
		이때 출력할 내용은
			변수, 연산식, 상수등 모든것들이 올 수 있다.
			표현자 방식의
				<%= %>
			와 같은 기능이다.
		
		***
		이때 request, session 객체의 속성은 
		속성값만 호출하는 것으로 내용을 출력할 수 있다.
		
		다른 객체들의 속성은 소속을 밝혀줘야 한다.
		
----------------------------------------------------------------------------------------------------
core Tag
	
	1. c:out
		==> EL과 동일하게 내용을 출력하는 기능을 가진 태그
		
		형식 ]
			
			<c:out value="데이터" />
			
			<c:out value="${데이터}" />
			
		장점 ]
			동시에 여러 데이터를 출력하라 수 있다.
			즉, 여러개를 하나로 합쳐서 하나의 문자열을 만든 후 출력하게 된다.
			
			예 ]
				<c:out value="${'<tag>, 10'}" />
				==> 결과 : <tag>, 10
	
	*
	2. c:set
		==> 변수에 데이터를 기억시키는 기능을 가진 태그
		
		형식 ]
			<c:set var="변수" value="데이터" />
			
	3. c:remove
		==> 변수의 데이터를 강제로 삭제하는 기능의 태그
		
		형식 ]
			<c:remove var="삭제할 변수이름" />
			
		예 ]
			
			<c:set var="no" value="123" />
			.....
			
			<c:remove var="no" />
			
			
	4. c:if
		==> 자바의 if  명령을 태그로 만들어 놓은 것
			
		형식 ]
			
			<c:if test="조건식">
				작업....
			</c:if>
			
		참고 ]
			이 명령은 자바에서의 else, else if 구문이 만들어 지지 않았다.
			따라서 모두 if 문으로만 처리해야 한다.
			
			
		*****
		JSTL에서는 조건식을 만들때 
		조건 연사자를 자바에서 사용하는 조건 연산자를 이용해도 되지만
		JSTL 연산자를 별도로 제공하고 있다.
		
			eq		: ==
			lt		: <
			le		: <=
			gt		: >
			ge		: >=
			ne		: !=
			
			and		: &&
			or		: ||
			not		: !
			
			empty	: 데이터가 채워져있지 않다.
		
		예 ]
			main.jsp 참고
			
	5. c:choose
		==> 자바의 switch - case 명령을 태그로 만들어 놓은 것.
		
		형식 ]
			<c:choose>
				<c:when test="조건식1">
					처리내용1
				</c:when>
				<c:when test="조건식2">
					처리내용2
				</c:when>
				....
				<c:otherwise>
					처리내용 n
				</c:otherwise>
			</c:choose>
			==> 한개라도 c:when의 조건식이 맞으면 그것만 실행하고 <c:choose>를 종료한다.
			
	6. c:forEach
		==> 자바의 for  명령을 태그로 만들어 놓은 것.
		
		형식 ]
			<c:forEach var="변수이름" begin="시작값" end="종료값" step="증가값" varStatus="st">
				처리내용
			</c:forEach>
		주의 ]
			end는 == 개념이 포함되어있다.
			다시말해서 종료값포함해서 반복한다.
			
			step이 1인 경우는 생략해도 무방하다.
			
		참고 ]
			varStatus : 반복 상태를 기억하는 객체
			사용할 수 있는 속성 ]
				
				current	: 현재 데이터를 기억하는 속성
				index	: 현재 몇번째 반복인지(위치값)을 기억하는 속성
				count	: 반복 회차를 기억하는 속성
				first	: 현재 반복이 첫번째 인지를 기억하는 속성 : true | false
				last	: 현재 반복이 마지막번째 인지를 기억하는 속성 : true | false
				begin	: 시작값
				end		: 종료값
				step	: 증가값
		
		














