지시자
==> JSP  문서의 특성이나 처리 방식을 지시하는 명령

	형식 ]
		
		<%@ 명령어 속성="값" 속성="값"  %>
		
	명령어의 종류
		page		: 문서 자체의 특성이나 처리방식을 지시하는 명령
		include		: 문서 안에 다른 문서를 포함하도록 지시하는 명령
		taglib		: 사용자가 제작한 태그를 사용할 수 있도록 선언하는 명령
		
		
		1. page 명령
			==> 현재 제작하는 문서 자체에 특성이나 처리 방식을 지시하는 명령
			
			형식 ]
				
				<%@ page 속성="값" 속성="값" ... %>
				
			참고 ]
				속성 : 지정하고 싶은 특성이나 처리방식에 대한 예약된 단어
				값	 : 해당 특성이나 처리방식에 대한 내용
				
			1) language
				==> 스크립트할 언어의 종류를 지정하는 속성
					생략하면 자동으로 자바언어를 사용하게 된다.
					
					형식 ]
						
						<%@ page language="java" %>
						
			2) extends
				==> JSP는 실행을 하면 내부적으로 자바클래스로 변환되어서 실행되도록 되어있다.
					(즉, 중간단계의 언어로 바뀐 상태에서 실행을 하므로
						ASP, PHP 보다 실행속도가 빠른 장점을 가지고 있다.)
						
					이때 중간에서 만들어지는 클래스가 어떤 클래스를 상속 받아서 만들어지는지를 지정하는 속성이다.
					
					그런데
					JSP는 클래스로 변환될 때 HttpJspBase 클래스를 상속 받도록 되어있다.
					그런데 자바에서 클래스의 상속은 단일 상속만 가능하므로
					다른 클래스를 상속 받을 수 없는 상태가 된다.
					따라서 생략해도 무방하고
					생략하면 자동적으로 HttpJspBase를 상속받게된다.
					
					형식 ]
						
						<%@ page extends="javax.servlet.jsp.HttpJspBase" %>
						
-----------------------------------------------------------------------------------------------------
# day03
			*
			3) import
				==> 문서내에서 자바적인 요소를 추가할 수 있는데
					이때 사용하는 자바적인 요소가 특정 패키지 소속이면
					자바와 동일하게 반드시 import 시켜야 한다.
					그 작업을 해주는 속성
				
				예 ]
					
					<%@ page import="java.util.*" %>
				참고 ]
					여러 클래스를 임포트 하는경우
					따로 해도 되고
					한번에 여러개를 import 할 수 있다.
					
					예 ]
						<%@ page import="java.util.*, java.io.*" %>
					
			4) session
				==> 세션 사용여부를 설정하는 속성
					생략하면 세션을 사용하도록 설정된다.(기본값이 true)
					
				예 ]
					<%@ page session="true" %>
			
			*
			5) buffer
				==> 내부적으로 버퍼를 사용할지를 결정하는 속성
					버퍼의 크기를 얼마로 할지 여부를 지정한다.
					생략하면 기본적으로 8KByte를 버퍼로 사용하게 된다.
				
				예 ]
					<%@ page buffer="none" %> ==> 버퍼를 사용하지 않겠다.
					
					<%@ page buffer="16K" %> ==> 버퍼메모리로 16KByte를 사용하겠다.
					
				참고 ]
					버퍼 란?
						클라이언트에게 서버가 응답을 할 때 
						처리속도를 빠르게 하기 위해서
						중간에 버퍼를 사용해서 데이터를 모았다가
						한번에 출력하는 것.
					
			6) autoFlush
				==> 자동 Flush 개념을 사용할 지 여부를 지정하는 속성
					생략하면 "true" 로 지정되고 자동 flush 기능이 실행된다.
					
				예 ]
					<%@ page autoFlush="true" %>
			
			7) isThreadSafe
				==> 스레드 처리를 할 때 동기화 처리 여부를 판단하는 속성
					생략하면 자동 동기화 처리를 하게 된다.
					
				예 ]
					<%@ page isThreadSafe="true" %>
					
				참고 ]
					JSP의 모든 문서는 자동 스레드 처리가 된다.
					즉, 여러 클라이언트가 동시에 접속을 하더라도
					스레드 처리를 해서 응답하도록 되어 있다.
			**
			8) info
				==> 주석문에 해당하는 것
					생행에는 영향이 없고
					문서에 대한 정보(주석)를 추가하고 싶을때 사용하는 속성
					
				예 ]
					<%@ page info="회원가입 페이지" %>
			
			***
			9) errorPage
				==> JSP 문서를 실행하는 도중 문제(Exception)가 발생하면
					그 문서로는 응답을 할 수 없다.
					그래서 대신 응답할 문서를 지정하는 속성
					
				예 ]
					<%@ page errorPage="myError.jsp" %>
					==> 이페이지를 실행하는 도중 에러가 발생하면
						myError.jsp 파일로 응답하세요.
			
			***
			10) isErrorPage
				==> 지금 만들고 있는 문서가 에러 페이지용 문서인지를 지정하는 속성
				
				예 ]
					<%@ page isErrorPage="true" %>
					
			***
			11) contentType
				==> 실행 결과의 응답 방식을 지정하는 속성
				
				참고 ]
					실행 결과 만들어지는 문서의 종류를 지정할 수 있다.
					이때 응답 문서의 종류는 MIME TYPE으로 지정해야 한다.
					
				예 ]
					<%@ page contentType="text/html" %>
					
				참고 ]
					이 속성에는 한글 인코딩 방식도 같이 지정할 수 있다.
					
					형식 ]
						<%@ page contentType="text/html; charset=UTF-8" %>
						
				참고 ]
					이 속성은 매우 중요한 속성이므로
					생략하면 일반 txt 파일로 응답하게 된다.
					그래서 반드시 지정해야하는 유일한 속성이다.
			
			*
			12) pageEncoding
				==> 한글 인코딩 방식을 지정하는 속성
				
				예 ]
					<%@ page pageEncoding="UTF-8" %>
					
				참고 ]
					contentType에서 한글 인코딩을 같이 지정할 수 있으므로
					생략해도 무방하다. ...
					
----------------------------------------------------------------------------------------------------

참고 ]
	프로젝트의 폴더 구조
		
		Java Resources	: 서버프로그램을 자바로 제작하는 위치
		
		build - 우리하고는 일단은 상관없으므로 무시하기로 한다.
		
		WebContent : html, css, js, jsp  파일이 만들어지는 장소
					<== 클라이언트 입장에서 루트 디렉토리(/)에 해당
	
	
	뷰(html)로 사용할 페이지는 WebContent 하위에 작성해야 한다.
	
	참고 ]
		Java Resources 하위는 자바의 패키지 개념으로 만들어야 하고
		WebContent 하위는 폴더 개념으로 만들어야 한다.
		
		WebContent 하위에 test01 이라는 폴더를 만들고 그곳에 test01.html 만든다면
		이 파일에 대한 요청은
			
			http://locahost[:80]/[bio/]test01/test01.html

-----------------------------------------------------------------------------------------

지시자
	2. include
		==> 다른 문서를 현재 문서에 포함시키는 기능을 가진 지시자
			그래서 하나의 파일을 만든다.
			
		형식 ]
			<%@ include file="파일경로/파일이름" %>
			
		참고 ]
			우리가 웹페이지를 제작하다보면
			여러페이지에 동일 한 코드가 반복되어서 들어가는 경우가 있다.
			
			하지만 원칙적으로는 JSP 문서가 만든 결과를 응답하기 때문에
			( 문서 하나만 응답을 해줘야 하기 때문에...)
			각 문서마다 동일한 내용이더라도 다시 작성해줘야 한다.
			
			이런 불편함을 조금이나마 덜기 위한 방법으로 제시된 지시자
			
		결론적으로
		자주 사용되는 코드는 별도로 만들어 놓고
		응답 문서에 따로 만들어진 파일을 합쳐서 하나의 문서로 만드는 방법이다.
		
		***
		이 작업은 먼저 코드를 합치고(하나의 문서로 만들고) 컴파일을 하나다.
		(<== jsp 문서는 클래스 파일로 변환되서 실행되기 때문에)
		만약 먼저 합쳤을 때 문제가 발생하면(변수등이 충돌이 나면)
		에러가 발생하게 된다.
		
-----------------------------------------------------------------------------------------

스크립트 방식 : JSP  문서에 코드를 작성하는 방법
	==> JSP 는  HTML 언어가 기본이 되고 필요하면 자바 언어를 필요한 위치에 삽입해서 
		같이 실행하는 문서이다.
		이처럼 다른 언어에 포함하여 처리하는 방식을
		스크립트 방식이라고 표현하고
		JSP 문서에 자바 언어를 삽입하는 방법은 다음 3가지 방법이 있다.
	
	1. 스크립트 릿 방식 - 있어서 설명하지만 절대 사용하지 마세요...
		==> 일반적인 자바 언어를 포함시키는 방식을 의미
			( 다시 말해서 JSP 문서에 자바 코드 그대로 작성하는 방법 )
			
			그런데 JSP 문서내에 작성된 내용은 모두 _jspService() 함수 내에 기록이되고
			따라서 이곳은 결국은 지역적인 역할을 하게 된다.
			(==> JSP 문서내에서 변수를 만들게 되면 지역변수로 사용이된다.)
			
		참고 ]
			JSP 문서는 여러 문서가 동시에 실행되는 것이 아니고
			클라이언트가 요청한 문서 하나만 실행되므로
			클래스가 연결되어서 실행되는 경우는 거의 없다.
			결론적으로 main 함수만 있으면 충분하게 그 역할을 다할 수 있게된다.
			
		참고 ]
			JSP 문서는 실행을 하면 
			먼저 Java 클래스로 변환이 되고
			그것을 컴파일 해서 실행하는 방식이다.
			이런 클래스를 우리는 서블릿 클래스라 부르고
	
	2. 선언자 방식 -- 
	
	3. 표현자 방식	: 표현자 방식을 되도록이면 사용하세요...















































