# day05

3. response 객체
	==> 서버가 클라이언트에게 응답하는 정보를 관리하는 내장객체
		
		HttpServeletResponse 라는 클래스를 이용해서 만들어진 내장객체
		
		주요함수 ]
			
			sendRedirect()
			==> 서버에서 강제로 클라이언트의 요청을 변경하는 방법
				즉, 클라이언트는 A라는 요청을 했는데
				서버측에서는 B라는 요청에 대한 응답으로 강제로 변경하는 방법
				
				예를 들면
				로그인의 경우
					로그인이 성공하면 메인 페이지로
					로그인에 실패하면 로그인 페이지로
				이동을 하게 되는데
				실제 클라이언트는 로그인에 대한 처리를 해주는 페이지를 요청하게 된다.
				그것을 로그인 성공 여부에 따라서 서버가 강제로 요청을 바꾸는 작업을 하게되는 것이다.
				
				
		참고 ]
			
			서버가 요청을 변경하는 방법
				1. sendRedirect
					==> 서버가 클라이언트의 요청을 강제로 바꾸게 되는 것으로
						클라이언트의 요청 정보는 모두 사라지고
						완벽하게 서버가 만든 새로운 요청 정보로 만들어지게 된다.
						
						따라서 클라이언트가 새로고침을 하게되면
						서버가 변경한 요청부터 시작하게 된다.
						
						주로 뷰가 없는 데이터베이스 작업 처리 결과에 해당하는 요청의 경우
					
				2. forward
					==> 
						원래 클라이언트의 요청을 유지하고
						화면에 보여지는 문서만 바꾸는 방식 
						
						참고로 JSP 문서는 HttpJspBase 라는 서블릿클래스를 상속받는 자바클래스다.
						그 말은 요청에 대한 응답을 해줄 수 있는 클래스라는 것이고
						다시 클라이언트가 어떤 요청을 했을 때 그 요청을 분석해서 응답해줄 수 잇는
						요청 처리 클래스이다.
						
						우리가 어떤 요청을 하게 되면 자바 클래스가 실행될 것이고
						그 실행의 결과 응답 문서가 만들어지게 되서 그 문서로 응답을 하는데
						forward로 처리를 하면
						요청내용에 해당하는 처리는 자바클래스에서 하고
						응답문서(보여질 화면 문서, html 문서)는 jsp 문서로 대치해서 처리하는 방식이다.
							
							
4. session
	==> 서버에서 사용자 정보를 관리하는 내장객체
		
		HttpSession 이라는 클래스를 이용해서 만들어진 내장 객체
		
5. application
	==> 서버 전체를 관리하는 내장 객체
	
		ServletContext 라는 클래스를 이용해서 만들어진 내장 객체
		
6. page
	==> 해당문서 자체를 관리하는 내장 객체
	
		pageContext 라는 클래스를 이용해서 만들어진 내장 객체
		
------------------------------------------------------------------------------------------------------------

내장 객체의 영역
==> 내장 객체의 영역을 이용하면 데이터를 보관하고 사용할 수 있다.
	즉, 서버 스스로가 필요한 데이터를 보관했다가 사용할 수 있다.
	
	물론 자바적으로 변수에 기억해 놓았다가 사용해도 되지만
	자바 변수로 만들게 되면 
	거의 지역변수로 만들어지므로
	같은 지역(문서)에서만 사용할 수 있게된다.
	
	따라서 내장객체를 이용하면 좀더 넓은 범위에서 데이터를 사용하게 된다.
	
	그런데
	내장 객체를 무엇을 사용해서 데이터를 기억했는지에 따라서
	그 데이터를 사용할 수 있는 범위가 달라진다.
	이것을 우리는 내장객체의 영역(Scope)라 부른다.
	
	예 ]
		request.setAttribute("키값", 데이터);
		==> 요청이 유지되는 동안은 이 데이터를 사용할 수 있다.
		
		session.setAttribute("키값", 데이터);
		==> 접속이 유지되는 동안은 이 데이터를 언제든지 사용할 수 있다.
		
*****
중요 ]
	내장 객체에 데이터를 추가 하는 방법
		
		내장객체.setAttribute("키값", 데이터);
		
	인데
	파라미터는 데이터를 추가하는 방법이 없다.
	오직 데이터를 꺼내는 함수만 있다.
		
		request.setParameter()
	이런 함수는 존재하지 않는다.
	
	
	1. pageContext
		==> 같은 문서 내에서만 그 데이터를 사용할 수 있다.
	*
	2. request
		==> 같은 요청이 유지되는 동안에는 그 데이터를 사용할 수 있다.
		
	***
	3. session
		==> 세션이 유지되는 동안에는 그 데이터를 사용할 수 있다.
	
	4. application
		==> 같은 서버를 사용하는 문서에서는 그 데이터를 사용할 수 있다.
			웹 서버는 각각의 클라이언트에게 독립적으로 응답한다.
			즉, 다른 클라이언트의 요청에 상관없이 독립적으로
			그 클라이언트가 요청한 문제를 해결하는 것이 일반적이다.
			따라서 모든 문서에서 동일한 데이터를 사용할 일은
			거의 존재 하지 않는다.
			
-----------------------------------------------------------------------------------------
	
	
	
		

			